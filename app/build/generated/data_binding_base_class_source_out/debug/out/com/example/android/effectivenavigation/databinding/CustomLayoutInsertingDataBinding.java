// Generated by view binder compiler. Do not edit!
package com.example.android.effectivenavigation.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.android.effectivenavigation.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CustomLayoutInsertingDataBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final EditText amountEdit;

  @NonNull
  public final Button cancelButton;

  @NonNull
  public final EditText noteEdit;

  @NonNull
  public final Button saveButton;

  @NonNull
  public final EditText typeEdit;

  private CustomLayoutInsertingDataBinding(@NonNull LinearLayout rootView,
      @NonNull EditText amountEdit, @NonNull Button cancelButton, @NonNull EditText noteEdit,
      @NonNull Button saveButton, @NonNull EditText typeEdit) {
    this.rootView = rootView;
    this.amountEdit = amountEdit;
    this.cancelButton = cancelButton;
    this.noteEdit = noteEdit;
    this.saveButton = saveButton;
    this.typeEdit = typeEdit;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CustomLayoutInsertingDataBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CustomLayoutInsertingDataBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.custom_layout_inserting_data, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CustomLayoutInsertingDataBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.amount_edit;
      EditText amountEdit = ViewBindings.findChildViewById(rootView, id);
      if (amountEdit == null) {
        break missingId;
      }

      id = R.id.cancelButton;
      Button cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.note_edit;
      EditText noteEdit = ViewBindings.findChildViewById(rootView, id);
      if (noteEdit == null) {
        break missingId;
      }

      id = R.id.saveButton;
      Button saveButton = ViewBindings.findChildViewById(rootView, id);
      if (saveButton == null) {
        break missingId;
      }

      id = R.id.type_edit;
      EditText typeEdit = ViewBindings.findChildViewById(rootView, id);
      if (typeEdit == null) {
        break missingId;
      }

      return new CustomLayoutInsertingDataBinding((LinearLayout) rootView, amountEdit, cancelButton,
          noteEdit, saveButton, typeEdit);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
